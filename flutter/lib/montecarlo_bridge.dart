// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.54.1.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member

import 'dart:convert';
import 'dart:async';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';

import 'package:meta/meta.dart';
import 'package:meta/meta.dart';
import 'dart:ffi' as ffi;

abstract class DrawdownRust {
  Future<StatResults> simulation(
      {required SimulationConfig simulationConfig, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSimulationConstMeta;
}

class SimulationConfig {
  final double savings;
  final double withdrawalRate;
  final double stocks;
  final double bonds;
  final double cash;
  final int simulationRounds;
  final int simulationYears;
  final int quantiles;

  SimulationConfig({
    required this.savings,
    required this.withdrawalRate,
    required this.stocks,
    required this.bonds,
    required this.cash,
    required this.simulationRounds,
    required this.simulationYears,
    required this.quantiles,
  });
}

class StatResults {
  final List<StatsSingleYear> years;

  StatResults({
    required this.years,
  });
}

/// Results from a single year, the stats of the 100k simulations
class StatsSingleYear {
  final int year;
  final double min;
  final double max;
  final double mean;
  final double median;
  final double stddev;
  final Float64List quantiles;

  StatsSingleYear({
    required this.year,
    required this.min,
    required this.max,
    required this.mean,
    required this.median,
    required this.stddev,
    required this.quantiles,
  });
}

class DrawdownRustImpl implements DrawdownRust {
  final DrawdownRustPlatform _platform;
  factory DrawdownRustImpl(ExternalLibrary dylib) =>
      DrawdownRustImpl.raw(DrawdownRustPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory DrawdownRustImpl.wasm(FutureOr<WasmModule> module) =>
      DrawdownRustImpl(module as ExternalLibrary);
  DrawdownRustImpl.raw(this._platform);
  Future<StatResults> simulation(
      {required SimulationConfig simulationConfig, dynamic hint}) {
    var arg0 =
        _platform.api2wire_box_autoadd_simulation_config(simulationConfig);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_simulation(port_, arg0),
      parseSuccessData: _wire2api_stat_results,
      constMeta: kSimulationConstMeta,
      argValues: [simulationConfig],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSimulationConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "simulation",
        argNames: ["simulationConfig"],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  double _wire2api_f64(dynamic raw) {
    return raw as double;
  }

  Float64List _wire2api_float_64_list(dynamic raw) {
    return raw as Float64List;
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  List<StatsSingleYear> _wire2api_list_stats_single_year(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_stats_single_year).toList();
  }

  StatResults _wire2api_stat_results(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return StatResults(
      years: _wire2api_list_stats_single_year(arr[0]),
    );
  }

  StatsSingleYear _wire2api_stats_single_year(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return StatsSingleYear(
      year: _wire2api_i32(arr[0]),
      min: _wire2api_f64(arr[1]),
      max: _wire2api_f64(arr[2]),
      mean: _wire2api_f64(arr[3]),
      median: _wire2api_f64(arr[4]),
      stddev: _wire2api_f64(arr[5]),
      quantiles: _wire2api_float_64_list(arr[6]),
    );
  }
}

// Section: api2wire

@protected
double api2wire_f64(double raw) {
  return raw;
}

@protected
int api2wire_i32(int raw) {
  return raw;
}

// Section: finalizer

class DrawdownRustPlatform extends FlutterRustBridgeBase<DrawdownRustWire> {
  DrawdownRustPlatform(ffi.DynamicLibrary dylib)
      : super(DrawdownRustWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_SimulationConfig> api2wire_box_autoadd_simulation_config(
      SimulationConfig raw) {
    final ptr = inner.new_box_autoadd_simulation_config_0();
    _api_fill_to_wire_simulation_config(raw, ptr.ref);
    return ptr;
  }

// Section: finalizer

// Section: api_fill_to_wire

  void _api_fill_to_wire_box_autoadd_simulation_config(
      SimulationConfig apiObj, ffi.Pointer<wire_SimulationConfig> wireObj) {
    _api_fill_to_wire_simulation_config(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_simulation_config(
      SimulationConfig apiObj, wire_SimulationConfig wireObj) {
    wireObj.savings = api2wire_f64(apiObj.savings);
    wireObj.withdrawal_rate = api2wire_f64(apiObj.withdrawalRate);
    wireObj.stocks = api2wire_f64(apiObj.stocks);
    wireObj.bonds = api2wire_f64(apiObj.bonds);
    wireObj.cash = api2wire_f64(apiObj.cash);
    wireObj.simulation_rounds = api2wire_i32(apiObj.simulationRounds);
    wireObj.simulation_years = api2wire_i32(apiObj.simulationYears);
    wireObj.quantiles = api2wire_i32(apiObj.quantiles);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class DrawdownRustWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  DrawdownRustWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  DrawdownRustWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(uintptr_t)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(uintptr_t)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<uintptr_t Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_simulation(
    int port_,
    ffi.Pointer<wire_SimulationConfig> simulation_config,
  ) {
    return _wire_simulation(
      port_,
      simulation_config,
    );
  }

  late final _wire_simulationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_SimulationConfig>)>>('wire_simulation');
  late final _wire_simulation = _wire_simulationPtr
      .asFunction<void Function(int, ffi.Pointer<wire_SimulationConfig>)>();

  ffi.Pointer<wire_SimulationConfig> new_box_autoadd_simulation_config_0() {
    return _new_box_autoadd_simulation_config_0();
  }

  late final _new_box_autoadd_simulation_config_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_SimulationConfig> Function()>>(
      'new_box_autoadd_simulation_config_0');
  late final _new_box_autoadd_simulation_config_0 =
      _new_box_autoadd_simulation_config_0Ptr
          .asFunction<ffi.Pointer<wire_SimulationConfig> Function()>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();
}

class _Dart_Handle extends ffi.Opaque {}

class wire_SimulationConfig extends ffi.Struct {
  @ffi.Double()
  external double savings;

  @ffi.Double()
  external double withdrawal_rate;

  @ffi.Double()
  external double stocks;

  @ffi.Double()
  external double bonds;

  @ffi.Double()
  external double cash;

  @ffi.Int32()
  external int simulation_rounds;

  @ffi.Int32()
  external int simulation_years;

  @ffi.Int32()
  external int quantiles;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
typedef uintptr_t = ffi.UnsignedLong;
